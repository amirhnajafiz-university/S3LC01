Arethmatics 2:

Adders:

Half adder:
adds two single bits , with the carry out of the sumation.
Ai , Bi   ==>>  sum = Ai xor Bi   /   Carry = Ai . Bi

Full adder:
It gets one other input ac Ci which is the carry out of the last sumation chip.
It basically uses for adding more than 1 bit numbers.

Ai , Bi , Ci  ==>>  sum = Ci xor Ai xor Bi  /  Carry = BiCi + AiCi + AB == Ci ( Ai + Bi ) + AiBi == Ci( Ai xor Bi ) + AiBi
Note :: the 'xor' and 'or' are similar results in here, based on the karnugh map

Thats the functions of full adder.

A full adder can be also implement by 2 half adders:
That changing xor to or made it useful for us.


Delay analysis of ripple adder:
ripple adder is a circuit with full adders each for every two bits.
In this circuit the only zero delays are C0 and Ai, Bi s.
Others like S0 or totally every Si and Ci has delay and its related to Ci-1.

Note :: when this circuit starts, all of the outputs are showing something, but they are not valid until they get the input Ci.
so when it starts the first valid is S0 then S1 and .....


Carry lookahead adder:
This adder is a type of adder that acts like the normal ripple adder but it has some new methods that gets the dealys to lower levels.
Insted of waiting for the Ci it will preditc it from C0, so the delays will get lower.

For every row we have : Carry Generate >> Gi = Ai Bi
		    Carry Propagate >> Pi = Ai xor Bi c

Sum and Carry can be reexpressed in terms of generate/propagate:
	Si = Ai xor Bi xor Ci = Pi xor Ci
	Ci+1 = Ai Bi + Ai Ci + Bi Ci = Ai Bi + Ci (Ai + Bi)
			          = Ai Bi + Ci (Ai xor Bi)
 			          = Gi + Ci Pi
Now if we put numbers in i's , we will get a circuit without any Ci init.

Ex:
	C1 = G0 + P0 C0
	C2 = G1 + P1 C1 = G1 + P1 (G0 + P0 C0) = G1 + P1 G0 + P1 P0 C0
	C3 = G2 + P2 C2 = G2 + P2 (G1 + P1 G0 + P1 P0 C0) = G2 + P2 G1 + P2 P1 G0 + P2 P1 P0 C0
	C4 = G3 + P3 C3 = G3 + P3 G2 + P3 P2 G1 + P3 P2 P1 G0 + P3 P2 P1 P0 C0
So now you see that the outputs don't have any Cis and are only Pi and Gis with C0 => which will give use delay 0 is getting them.
Note:: this circuit can not be created in real life, cause it costs very much and the delay with gates will get higher cause we are using multi input gates ( e.g. C4 => 5I and )

Lookahead adder delay:
NOTE: This assumes all gate delay are same
in this case we have :
	row 0 => S0 = 2, C1 = 3
	row i  => Si = 4 , Ci+1 = 3


Since this circuit cannot be created, we combine it with the ripple adder so it will give us a suitable circuit.
For example , for a 12 bit adder we can use 3 lookaheads that are connected with their Cis to other 3.
 ==>          CLA 1 - C1 => CLA 2 - C2 => CLA 3
	C1 is CLA 2 C0 and C2 is CLA 3 C0


Adder/Subtractor:
Since we have the adder circuit, we can create the subtractor with some muxes.
>> A - B = A + (-B) = A + B’ + 1
we just need to add 2:1 muxes , with input C to adder 0 as the controller, 
and whenever C was 0 it choses all Bi s and the sumation is output, 
and if C was 1 it will chose all Bi` s with 1+ to first circuit. so the result is subtract A, B.

To check overflow validation, we use and xor with inputs : final carry out and insign carry out.

In 4bit adder we used 4 muxes to create a subtraction circuit. Insted we could use 4 xor gates with a direct controller that gives 0 or 1. If it gives zeros we will get the number itself , so it will give us a sumation. buf if we give 1 to it, it will give us the negative number or the prime number + 1 in first carry out input, so we will have a subtraction circuit.

Overflow checking : Overflow can occur ONLY when both numbers have the same sign. 
This condition can be detected when the carry out (Cn) is different than the carry at theprevious position (Cn-1).

The overflow problem in signed-2's complement :
We can check the overflow by using a xor gate in sign adder circuits.
We just xor the Cn and Cn-1 and the result will tell us if we got into overflow or not. ( Like normal circuit we check the carry outs )


BCD addition :
In bcd addition we add in normal way and whenever we hit overflow, we add the 6 to number and put the carryout into the next circuit.
We add 6 when every we get , overflow over bits or =>
Add 0110 to sum whenever it exceeds 1001 (11XX or 1X1X)

>> So its circuit is the same, with only one or gate in the end and two new adders with one xor to add 6 to the total compare and manage the needed changes in case of 11XX and 1X1X or bit overflow.

>> Overlapping does not make changes in our circuit.